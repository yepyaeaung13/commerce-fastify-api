// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(100)
  email       String    @unique @db.VarChar(255)
  password    String
  age         Int
  phoneNumber String?   @db.VarChar(20)
  address     Json?
  preferences Json?
  role        UserRole  @default(USER)
  status      UserStatus @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
  reviews     Review[]
  cart        Cart?

  @@index([email])
  @@map("users")
}

model Product {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(255)
  description String    @db.Text
  price       Decimal   @db.Decimal(10,2)
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  inStock     Boolean   @default(true)
  quantity    Int       @default(0)
  imageUrl    String?   @db.Text
  tags        String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]

  @@index([categoryId])
  @@index([name])
  @@map("products")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique @db.VarChar(100)
  description String?   @db.Text
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(10,2)
  address     Json        // Shipping address
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]

  @@index([userId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id          String    @id @default(uuid())
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Decimal   @db.Decimal(10,2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([orderId, productId])
  @@index([productId])
  @@map("order_items")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([productId])
  @@map("cart_items")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@index([productId])
  @@map("reviews")
}
